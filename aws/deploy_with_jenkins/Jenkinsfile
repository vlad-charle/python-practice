pipeline {
    agent any

    parameters {
        string(name: 'APP', defaultValue: 'my-custom-nginx', description: 'App name')
        string(name: 'REGION', defaultValue: 'us-east-1', description: 'AWS region')
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(
            artifactDaysToKeepStr: ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '30' : '5',
            artifactNumToKeepStr: ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '10' : '2',
            daysToKeepStr:  ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '30' : '5',
            numToKeepStr:  ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '30' : '10',
            ))
        ansiColor('xterm')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        SSH_KEY = credentials('ssh_key')
        REGION = "${params.REGION}"
        APP = "${params.APP}"
    }

    stages {
        stage('Fetch image list from ECR') {
            environment {
                TAGS = sh(script: 'python3 aws/deploy_with_jenkins/fetch_image_list.py',returnStdout: true).trim()
                REPO_URI = sh(script: 'python3 aws/deploy_with_jenkins/fetch_repo_uri.py',returnStdout: true).trim()
            }
            steps {
                echo TAGS
                script {
                    lastSymbol = TAGS.length() - 1
                    TAGS_LIST = TAGS.substring(1,lastSymbol).split(',').collect {tag -> tag.trim()}
                }
                echo TAGS_LIST
                echo TAGS_LIST[0]
                echo TAGS_LIST[1]
                echo TAGS_LIST[2]
                echo REPO_URI
            }
        }

        // stage('Chose image to deploy') {
        //     input {
        //         message 'Please, chose image to deploy'
        //         ok 'Done'
        //         parameters {
        //             choice(name: "IMAGE", choices: TAGS_LIST, description: "Chose ${APP} image to deploy")
        //         }
        //     }
        //     steps {
        //         echo params.IMAGE
        //     }
        // }

        // stage('Deploy and check status') {
        //     environment {
        //         IMAGE = "${REPO_URI}:${params.IMAGE}"
        //     }
        //     steps {
        //         echo IMAGE
        //         sh 'python3 aws/deploy_with_jenkins/deploy_image.py'
        //     }
        // }
    }

    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    cleanWhenAborted: true,
                    cleanWhenFailure: true,
                    cleanWhenSuccess: true,
                    cleanWhenUnstable: true)
        }
    }
}